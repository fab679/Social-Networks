import { Driver } from "neo4j-driver";
import { DocumentNode, GraphQLSchema } from "graphql";
import { ITypeDefinitions, IResolvers } from "@graphql-tools/utils";
import { IExecutableSchemaDefinition } from "@graphql-tools/schema";
import type { DriverConfig } from "../types";
import Node from "./Node";
export declare type SchemaDirectives = IExecutableSchemaDefinition["schemaDirectives"];
export interface Neo4jGraphQLConstructor {
    typeDefs: ITypeDefinitions;
    resolvers?: IResolvers;
    schemaDirectives?: SchemaDirectives;
    debug?: boolean | ((message: string) => void);
    driver?: Driver;
    driverConfig?: DriverConfig;
}
declare class Neo4jGraphQL {
    schema: GraphQLSchema;
    nodes: Node[];
    document: DocumentNode;
    private driver?;
    private driverConfig?;
    debug(message: string): void;
    constructor(input: Neo4jGraphQLConstructor);
    private createWrappedSchema;
    checkNeo4jCompat(input?: {
        driver?: Driver;
        driverConfig?: DriverConfig;
    }): Promise<void>;
}
export default Neo4jGraphQL;
//# sourceMappingURL=Neo4jGraphQL.d.ts.map